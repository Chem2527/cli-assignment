name: Container Vulnerability Scan using Trivy

on:
  push:
    branches:
      - main  # Trigger action when changes are pushed to the main branch

jobs:
  scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4  # Checkout the repository code

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2  # Set up Docker Buildx (for multi-platform support)

      - name: Build the Docker image
        run: |
         docker build -t vulnerable-python-app -f vulnerable-python-app/Dockerfile vulnerable-python-app/  # Build the Docker image from the Dockerfile inside the vulnerable-python-app folder

      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget
          wget https://github.com/aquasecurity/trivy/releases/download/v0.41.0/trivy_0.41.0_Linux-64bit.deb
          sudo dpkg -i trivy_0.41.0_Linux-64bit.deb

      - name: Scan for vulnerabilities using Trivy
        uses: aquasecurity/trivy-action@master  # Trivy GitHub Action for scanning Docker images
        with:
          image-ref: 'vulnerable-python-app'
          format: 'json'
          output: 'trivy-report.json'
          severity: 'CRITICAL,HIGH'

      - name: Install SSH Client
        run: |
          sudo apt-get update
          sudo apt-get install -y openssh-client

      - name: Configure SSH for EC2
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AZURE_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 400 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.AZURE_VM_IP }} >> ~/.ssh/known_hosts

      - name: Push report to EC2 instance
        run: |
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa \
          trivy-report.json azureuser@${{ secrets.AZURE_VM_IP }}:/home/azureuser/reports/

      - name: Fetch and send Trivy report from EC2 to Slack
        if: always()  # Send notification regardless of success or failure
        run: |
          # SSH into EC2 and fetch the Trivy report
          TRIVY_REPORT=$(ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa azureuser@${{ secrets.AZURE_VM_IP }} "cat /home/azureuser/reports/trivy-report.json")

          # Format the JSON report into Slack-compatible message
          SLACK_MESSAGE=$(echo "$TRIVY_REPORT" | jq -r '{
            "text": "Trivy Vulnerability Scan Report",
            "attachments": [
              {
                "color": "#ff0000",
                "fields": [
                  {
                    "title": "Job Status",
                    "value": "${{ job.status }}",
                    "short": true
                  },
                  {
                    "title": "Trivy Report",
                    "value": . | tostring,
                    "short": false
                  }
                ]
              }
            ]
          }')

          # Send formatted message to Slack
          curl -X POST -H 'Content-type: application/json' --data "$SLACK_MESSAGE" ${{ secrets.SLACK_WEBHOOK_URL }}
